# We use compatible release functionality (see PEP 440 here: https://www.python.org/dev/peps/pep-0440/#compatible-release)
# to specify acceptable version ranges of our project dependencies. This gives us the flexibility to keep up with small
# updates/fixes, whilst ensuring we don't install a major update which could introduce backwards incompatible changes.

# Model Building Requirements
numpy>=1.18.1,<1.19.0
pandas>=1.0.1,<1.1.0
scikit-learn>=0.22.1,<0.23.0
joblib>=0.14.1,<0.15.0

# testing requirements
pytest>=5.3.5,<6.0.0

# packaging
setuptools>=46.0.0,<46.1.0
wheel>=0.34.2,<0.35.0

# fetching datasets
# kaggle>=1.5.6,<1.6.0

# Visualization
SeaBorn>=0.10.0,<0.11.0
MatPlotLib>=3.1.3,<3.2.0


chardet>=3.0.4,<3.1.0
watermark>=2.0.2,<2.1.0


# create enviroment:
# python -m venv <nombre>
# Activate enviroment:
# cd <nombre>/
# source bin/activate
# upgrade pip:
# pip install --upgrade pip
# Install requirements:
# pip install -r requirements.txt
# install jupyter notebook
# pip install jupyter notebook





# To activate this environment, use
#
#     $ conda activate test
#
# To deactivate an active environment, use
#
#     $ conda deactivate
#
# commnad +z: Salir de jupyter

#  conda env update --file requirements.txt  --prune -n test


#  conda activate test   o  
#  cd test_env
#  source bin/activate

#  https://rukbottoland.com/blog/tutorial-de-python-virtualenv/

#  jupyter notebook


